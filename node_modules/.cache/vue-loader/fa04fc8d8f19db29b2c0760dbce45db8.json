{"remainingRequest":"C:\\Users\\lucky\\Desktop\\K-Test-Tracker-Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\lucky\\Desktop\\K-Test-Tracker-Frontend\\src\\views\\SchemaEditor.vue?vue&type=style&index=0&id=f54a5eb0&lang=sass&scoped=true&","dependencies":[{"path":"C:\\Users\\lucky\\Desktop\\K-Test-Tracker-Frontend\\src\\views\\SchemaEditor.vue","mtime":1655367454879},{"path":"C:\\Users\\lucky\\Desktop\\K-Test-Tracker-Frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":1655277637321},{"path":"C:\\Users\\lucky\\Desktop\\K-Test-Tracker-Frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1655277614447},{"path":"C:\\Users\\lucky\\Desktop\\K-Test-Tracker-Frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":1655277620954},{"path":"C:\\Users\\lucky\\Desktop\\K-Test-Tracker-Frontend\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1655277616921},{"path":"C:\\Users\\lucky\\Desktop\\K-Test-Tracker-Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1655277640760},{"path":"C:\\Users\\lucky\\Desktop\\K-Test-Tracker-Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1655277613826}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCi5zY2hlbWEtZWRpdG9yLWNvbnRhaW5lcg0KICAgIGJhY2tncm91bmQ6IHdoaXRlDQogICAgaGVpZ2h0OiA2NDBweA0KICAgIHdpZHRoOiA2NDBweA0KICAgIHBhZGRpbmc6IDY0cHgNCiAgICBtYXJnaW46IDY0cHggYXV0bw0KDQoucHJvb2ZfdGFibGVfaGVhZGluZyA+IHRkDQogIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMCwgMCwgMCwgMC4xKQ0KICBwYWRkaW5nOiAxMHB4DQogIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2UNCi5wcm9vZl90YWJsZQ0KICB3aWR0aDogMTAwJQ0KDQoudGV4dC1hbGlnbg0KICBkaXNwbGF5OiBmbGV4DQogIGFsaWduLWl0ZW1zOiBiYXNlbGluZQ0KLnRleHQtYWxpZ24gPiBzcGFuDQogIGZvbnQtc2l6ZTogeC1sYXJnZQ0KDQoudGFibGVfYnRucyBidXR0b24NCiAgbWluLXdpZHRoOiAxMDBweA0KICBsaW5lLWhlaWdodDogMzBweA0KICBmb250LXNpemU6IDE0cHgNCiAgaGVpZ2h0OiAzMHB4DQogIGNvbG9yOiB3aGl0ZQ0KICBiYWNrZ3JvdW5kOiByZ2JhKDAsIDE3OSwgMTE1LCAxKQ0KICBib3JkZXItcmFkaXVzOiAyMnB4DQogIHRleHQtYWxpZ246IGNlbnRlcg0KICB0cmFuc2l0aW9uOiAwLjVzDQogIGJvcmRlcjogbm9uZQ0KDQoudGFibGVfYnRucyBidXR0b246aG92ZXINCiAgdGV4dC1kZWNvcmF0aW9uOiBub25lDQogIGNvbG9yOiB3aGl0ZQ0KICBiYWNrZ3JvdW5kOiAjMDA4RjVDDQoudGFibGVfYnRucw0KICBkaXNwbGF5OiBmbGV4DQogIA0KLnNjaGVtYS1jb250YWluZXINCiAgZGlzcGxheTogZ3JpZA0KICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAyZnINCiAgZ3JpZC1jb2x1bW4tZ2FwOiAyNHB4DQogIG1hcmdpbjogOTRweCAxMjBweCA2NHB4IDEyMHB4DQoNCi50dC1kcm9wLWRvd24NCiAgcG9zaXRpb246IGFic29sdXRlDQogIG1hcmdpbi1sZWZ0OiAxMjBweA0KICBtYXJnaW4tdG9wOiAzMHB4DQogIG92ZXJmbG93LXk6IHNjcm9sbA0KICBtYXgtaGVpZ2h0OiA0MDBweA0KDQouc2NoZW1hLWNvbnRhaW5lci1pdGVtDQogIGJhY2tncm91bmQ6IHdoaXRlDQogIHBhZGRpbmc6IDMycHgNCg0KLmZvcm0tbGFiZWwNCiAgZm9udC1zaXplOiAxMnB4DQogIGxpbmUtaGVpZ2h0OiAxNnB4DQogIGNvbG9yOiAjMDAxRTYyDQoNCg0KLnRoaW4tdGV4dC1hcmVhDQogIHdpZHRoOiAxMDAlDQogIGJhY2tncm91bmQ6ICNGRkZGRkYNCiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjEpDQogIGJveC1zaXppbmc6IGJvcmRlci1ib3gNCiAgYm9yZGVyLXJhZGl1czogMjJweA0KICBwYWRkaW5nOiA4cHgNCiAgY29sb3I6ICMwMDFFNjINCiAgcGFkZGluZy1sZWZ0OiAyMnB4DQogIG1hcmdpbjogMCAwIDEycHggMA0KDQoudGhpY2MtdGV4dC1hcmVhDQogIHdpZHRoOiAxMDAlDQogIGJhY2tncm91bmQ6ICNGRkZGRkYNCiAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLCAwLCAwLCAwLjEpDQogIGJveC1zaXppbmc6IGJvcmRlci1ib3gNCiAgYm9yZGVyLXJhZGl1czogMjJweA0KICBwYWRkaW5nOiA4cHgNCiAgY29sb3I6ICMwMDFFNjINCiAgcGFkZGluZy1sZWZ0OiAyMnB4DQogIG1pbi1oZWlnaHQ6IDY0cHgNCiAgbWFyZ2luOiAwIDAgMTJweCAwDQoNCi50aGluLXRleHQtYXJlYTpmb2N1cw0KICBib3gtc2hhZG93OiBub25lDQogIGJvcmRlcjogMnB4IHNvbGlkICMwMEIzNzMNCg0KLnRlc3QtdHlwZS1zZWxlY3QtY29udGFpbmVyDQogIGRpc3BsYXk6IGZsZXgNCiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQNCiAgbWFyZ2luOiA0MHB4IDgwcHggMA0KICBtYXgtd2lkdGg6IDEwMCUNCg0KLmNyZWF0ZS1xdWVzdGlvbi1mb3JtDQogIGJhY2tncm91bmQ6IHdoaXRlDQoNCi50ZXN0LXF1ZXN0aW9uLWxpc3QNCiAgcG9zaXRpb246IHJlbGF0aXZlDQoNCi50ZXN0LXF1ZXN0aW9uLWxpc3Q6OmJlZm9yZQ0KICBwb3NpdGlvbjogYWJzb2x1dGUNCiAgY29udGVudDogdmFyKC0tdGV4dCkNCiAgdGV4dC1hbGlnbjogY2VudGVyDQogIGJhY2tncm91bmQ6IHJnYmEoMCwgMzAsIDk4LCAxKQ0KICBjb2xvcjogd2hpdGUNCiAgd2lkdGg6IDEwMCUNCiAgaGVpZ2h0OiBhdXRvDQogIHBhZGRpbmc6IDJweA0KICBmb250LXNpemU6IDEwcHQNCiAgbGVmdDogLTBweA0KICB0b3A6IC0yNHB4DQoNCkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1heC13aWR0aDogOTAwcHgpDQogIC5zY2hlbWEtY29udGFpbmVyDQogICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnINCiAgICBtYXJnaW46IDE2cHgNCg0KICAuc2NoZW1hLWNvbnRhaW5lci1pdGVtDQogICAgbWFyZ2luOiAxNnB4DQo="},{"version":3,"sources":["SchemaEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAodA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA","file":"SchemaEditor.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <div :style=\"cssVars\">\r\n    <!--\r\n    <TTModal\r\n      v-show=\"showDeleteModal\"\r\n      @onConfirm=\"deleteTestQuestion()\"\r\n      header=\"Are you Sure?\"\r\n      message=\"Yes mate\"\r\n    />\r\n    -->\r\n    <Dropdown\r\n  \r\n      :selected=\"testTypeToFilter\"\r\n      v-on:input=\"testTypeToFilter = $event\"\r\n      :options=\"uniqueTestTypes\"\r\n      class=\"tt-drop-down\"\r\n      title=\"Select Test Type\"\r\n    />\r\n    <div class=\"schema-container\">\r\n      <div\r\n        class=\"test-type-overview schema-container-item\"\r\n        style=\"max-height: 500px\"\r\n      >\r\n        <p class=\"card-header-text\">{{ Schema.test_type_name }}</p>\r\n        <p style=\"font-size: 0.9em; margin-top: 0\">\r\n          {{ Schema.test_type_description }}\r\n        </p>\r\n        <DataRow :fieldName=\"'Total Marks'\" :fieldData=\"Schema.total_marks\" />\r\n        <DataRow\r\n          :fieldName=\"'Payment Amount'\"\r\n          :fieldData=\"`$${(Schema.payment_amount_cents / 100).toFixed(2)}`\"\r\n        />\r\n        <DataRow\r\n          :fieldName=\"'Show Granular Feedback'\"\r\n          :fieldData=\"Schema.show_granular ? 'Yes' : 'No'\"\r\n        />\r\n        <DataRow\r\n          :fieldName=\"'High Pass Rate'\"\r\n          :fieldData=\"`${Schema.high_pass_rate * 100}%`\"\r\n        />\r\n        <DataRow\r\n          :fieldName=\"'Pass Rate'\"\r\n          :fieldData=\"`${Schema.pass_rate * 100}%`\"\r\n        />\r\n        <DataRow\r\n          :fieldName=\"'Fail Rate'\"\r\n          :fieldData=\"`${Schema.fail_rate * 100}%`\"\r\n        />\r\n      </div>\r\n      <div class=\"test-question-list schema-container-item\">\r\n        <div class=\"text-align\"><h4>Course Name:</h4>&ensp;<span>Becoming Proofreader</span></div>\r\n        <div class=\"text-align\"><h4>Test Type: </h4>&ensp;<span>Bap-01</span></div>\r\n      <table class=\"proof_table\">\r\n        <!-- v-show=\"Tests.length > 0\" -->\r\n        <thead class=\"proof_table_heading\" >\r\n          <td>Mark ID</td>\r\n          <td>Error Summary</td>\r\n          <td>Error Description/ Internal</td>\r\n          <td>Error Screenshot</td>\r\n          <td>Error Category</td>\r\n          <td>Learner-Facing Content</td>\r\n          <td>Associated Module</td>\r\n          <td>Associated Lesson</td>\r\n          <td>Associated Sub-section of Lesson</td>\r\n          <td>Associated Slide/Heading</td>\r\n        </thead>\r\n        <tr></tr>\r\n        <div></div>\r\n\r\n        \r\n      </table>\r\n\r\n      <div class=\"table_btns\" >\r\n        <button type=\"button\">Save Test</button>\r\n        <button type=\"button\">Mark Test</button>\r\n      </div>\r\n        <p class=\"subline\" v-show=\"editQuestionState.showForm\">Editing</p>\r\n        <p>\r\n          <span\r\n            class=\"card-header-text pointer\"\r\n            :style=\"\r\n              !editQuestionState.showForm\r\n                ? 'display: flex; justify-content: space-between'\r\n                : ''\r\n            \"\r\n            @click=\"editQuestionState.showForm = false\"\r\n          >\r\n            <span>{{ editorHeader }}</span\r\n            ><span\r\n              v-show=\"showQuestionView\"\r\n              @click=\"createQuestionState.showForm = true\"\r\n              class=\"subline\"\r\n              style=\"font-family: sans-serif\"\r\n            >\r\n              + New Question\r\n            </span>\r\n          </span>\r\n          <span class=\"card-header-text\" v-show=\"editQuestionState.showForm\">\r\n            / ID {{ editQuestionState.questionID }}\r\n          </span>\r\n        </p>\r\n\r\n        <!-- question creator -->\r\n        <div v-if=\"createQuestionState.showForm\" class=\"create-question-form\">\r\n          <span class=\"form-label\">Question Identifier</span>\r\n          <input\r\n            type=\"text\"\r\n            class=\"thin-text-area\"\r\n            placeholder=\"Q ID\"\r\n            v-model=\"createQuestionState.newQuestionForm.question_identifier\"\r\n          />\r\n\r\n          <span class=\"form-label\">Marks</span>\r\n          <input\r\n            type=\"number\"\r\n            class=\"thin-text-area\"\r\n            placeholder=\"marks\"\r\n            v-model=\"createQuestionState.newQuestionForm.marks\"\r\n          />\r\n\r\n          <span class=\"form-label\">Marker Remarks</span>\r\n          <textarea\r\n            class=\"thicc-text-area\"\r\n            placeholder=\"Marker Remarks\"\r\n            v-model=\"createQuestionState.newQuestionForm.marker_remarks\"\r\n          />\r\n\r\n          <span class=\"form-label\">Editor Feedback</span>\r\n          <textarea\r\n            class=\"thicc-text-area\"\r\n            placeholder=\"Editor Feedback\"\r\n            v-model=\"createQuestionState.newQuestionForm.editor_comments\"\r\n          />\r\n          <div\r\n            class=\"secondary-button pointer\"\r\n            style=\"height: 36px; line-height: 36px\"\r\n            @click=\"createTestQuestion\"\r\n          >\r\n            Create Test Question for {{ testTypeToFilter }}\r\n          </div>\r\n          <div\r\n            @click=\"createQuestionState.showForm = false\"\r\n            class=\"tertiary-button pointer\"\r\n            style=\"height: 36px; line-height: 36px; margin-top: 12px\"\r\n          >\r\n            Return to Questions\r\n          </div>\r\n        </div>\r\n\r\n        <!-- question editor -->\r\n\r\n        <div v-if=\"editQuestionState.showForm\">\r\n          <span class=\"form-label\">Question Identifier</span>\r\n          <input\r\n            type=\"text\"\r\n            class=\"thin-text-area\"\r\n            placeholder=\"Q ID\"\r\n            v-model=\"\r\n              Schema.TestQuestions.filter(\r\n                (q) => q['SchemaID'] == editQuestionState.questionID\r\n              )[0]['question_id']\r\n            \"\r\n          />\r\n\r\n          <span class=\"form-label\">Marks</span>\r\n          <input\r\n            type=\"number\"\r\n            class=\"thin-text-area\"\r\n            placeholder=\"marks\"\r\n            v-model=\"\r\n              Schema.TestQuestions.filter(\r\n                (q) => q['SchemaID'] == editQuestionState.questionID\r\n              )[0]['marks']\r\n            \"\r\n          />\r\n\r\n          <span class=\"form-label\">Marker Remarks</span>\r\n          <textarea\r\n            class=\"thicc-text-area\"\r\n            placeholder=\"Marker Remarks\"\r\n            v-model=\"\r\n              Schema.TestQuestions.filter(\r\n                (q) => q['SchemaID'] == editQuestionState.questionID\r\n              )[0]['marker_remarks']\r\n            \"\r\n          />\r\n\r\n          <span class=\"form-label\">Editor Feedback</span>\r\n          <textarea\r\n            class=\"thicc-text-area\"\r\n            placeholder=\"Editor Feedback\"\r\n            v-model=\"\r\n              Schema.TestQuestions.filter(\r\n                (q) => q['SchemaID'] == editQuestionState.questionID\r\n              )[0]['editor_comments']\r\n            \"\r\n          />\r\n          <div\r\n            class=\"secondary-button pointer\"\r\n            style=\"height: 36px; line-height: 36px\"\r\n            @click=\"updateTestQuestion\"\r\n          >\r\n            Update Test Question\r\n          </div>\r\n          <div\r\n            @click=\"editQuestionState.showForm = false\"\r\n            class=\"tertiary-button pointer\"\r\n            style=\"height: 36px; line-height: 36px; margin-top: 12px\"\r\n          >\r\n            Return to Questions\r\n          </div>\r\n        </div>\r\n\r\n        <div v-show=\"showQuestionView\">\r\n          <input\r\n            v-model=\"questionSearch\"\r\n            class=\"thin-text-area\"\r\n            placeholder=\"Search\"\r\n          />\r\n\r\n          <div v-if=\"testTypeToFilter !== 'EEDSTR01'\" v-for=\"(question, index) in filteredQuestions\" :key=\"index\">\r\n            <TestQuestion\r\n              :testQuestion=\"question\"\r\n              @updateQ=\"triggerTQForm\"\r\n              @deleteQ=\"deleteQuestion\"\r\n            />\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Repository from \"../services/Repository\";\r\nimport TestQuestion from \"../components/TestQuestion.vue\";\r\nimport DataRow from \"../components/DataRow.vue\";\r\nimport TTModal from \"../components/TTModal.vue\";\r\nimport TestTable from \"../components/TestTable.vue\";\r\nimport Dropdown from \"../components/Dropdown.vue\";\r\n// import e from \"express\";\r\n\r\nexport default {\r\n  name: \"SchemaEditor\",\r\n  components: { TestQuestion, DataRow, TTModal, TestTable, Dropdown },\r\n  data() {\r\n    return {\r\n      Schema: {},\r\n      questionSearch: \"\",\r\n      showDeleteModal: false,\r\n      editQuestionState: {\r\n        showForm: false,\r\n        questionID: 130,\r\n      },\r\n      AllTestTypes: [],\r\n      testTypeToFilter: \"EEDSTR01\",\r\n      createQuestionState: {\r\n        showForm: false,\r\n        newQuestionForm: {\r\n          question_identifier: \"\",\r\n          marker_remarks: \"\",\r\n          editor_comments: \"\",\r\n          marks: 1,\r\n          issue_type: \"\",\r\n          test_type: -1,\r\n        },\r\n      },\r\n    };\r\n  },\r\n\r\n  created() {\r\n    Repository.get(`test-type/${this.testTypeToFilter}`).then((r) => {\r\n      this.Schema = r.data;\r\n    });\r\n\r\n    Repository.get(\"test-types\").then((r) => {\r\n      this.AllTestTypes = r.data;\r\n    });\r\n  },\r\n  methods: {\r\n    \r\n    triggerTQForm(SchemaID) {\r\n      this.editQuestionState.showForm = true;\r\n      this.editQuestionState.questionID = SchemaID;\r\n    },\r\n    deleteQuestion(SchemaID) {\r\n      Repository.delete(`test-question/${SchemaID}`)\r\n        .then((r) => {\r\n          r;\r\n          this.Schema.TestQuestions = this.Schema.TestQuestions.filter(\r\n            (q) => q[\"SchemaID\"] != SchemaID\r\n          );\r\n\r\n          this.$notify({\r\n            title: \"Successfully Deleted\",\r\n            text: \"\",\r\n            type: \"info\",\r\n          });\r\n        })\r\n        .catch((e) => {\r\n          this.$notify({\r\n            title: \"Error Deleting\",\r\n            text: e,\r\n            type: \"error\",\r\n          });\r\n        });\r\n    },\r\n\r\n    createTestQuestion() {\r\n      let newQData = this.createQuestionState.newQuestionForm;\r\n      let payload = {\r\n        question_identifier: newQData.question_identifier,\r\n        marker_remarks: newQData.marker_remarks,\r\n        editor_comments: newQData.editor_comments,\r\n        marks: parseInt(newQData.marks),\r\n        issue_type: \"\",\r\n        test_type: this.Schema.ID,\r\n      };\r\n      Repository.post(\"test-question\", payload)\r\n        .then((r) => {\r\n          this.$notify({\r\n            title: \"Successfully Created\",\r\n            text: r.data,\r\n            type: \"info\",\r\n          });\r\n\r\n          this.resetCreateState();\r\n\r\n          //reload schema\r\n          Repository.get(`test-type/${this.testTypeToFilter}`).then((r) => {\r\n            this.Schema = r.data;\r\n          });\r\n        })\r\n        .catch((e) => {\r\n          this.$notify({\r\n            title: \"Test Creation Was Unsuccessful\",\r\n            text: e,\r\n            type: \"warn\",\r\n          });\r\n        });\r\n    },\r\n\r\n    updateTestQuestion() {\r\n      if (!this.editQuestionState.showForm) return;\r\n\r\n      let testQuestion = this.Schema.TestQuestions.filter(\r\n        (q) => q[\"SchemaID\"] == this.editQuestionState.questionID\r\n      )[0];\r\n\r\n      let payload = {\r\n        question_identifier: testQuestion[\"question_id\"],\r\n        marker_remarks: testQuestion.marker_remarks,\r\n        editor_comments: testQuestion.editor_comments,\r\n        info_url: \"\",\r\n        marks: parseInt(testQuestion.marks),\r\n        issue_type: \"\",\r\n        test_type: testQuestion.TestType.id,\r\n      };\r\n\r\n      Repository.put(\r\n        `test-question/${this.editQuestionState.questionID}`,\r\n        payload\r\n      )\r\n        .then((r) => {\r\n          r;\r\n          this.editQuestionState.showForm = false;\r\n          this.editQuestionState.questionID = 0;\r\n\r\n          this.$notify({\r\n            title: \"Successfully Updated\",\r\n            text: \"\",\r\n            type: \"info\",\r\n          });\r\n        })\r\n        .catch((e) => {\r\n          this.$notify({\r\n            title: \"Error Updating\",\r\n            text: e,\r\n            type: \"error\",\r\n          });\r\n        });\r\n    },\r\n    resetCreateState() {\r\n      this.createQuestionState = {\r\n        showForm: false,\r\n        newQuestionForm: {\r\n          question_identifier: \"\",\r\n          marker_remarks: \"\",\r\n          editor_comments: \"\",\r\n          marks: 1,\r\n          issue_type: \"\",\r\n          test_type: -1,\r\n        },\r\n      };\r\n    },\r\n  },\r\n  computed: {\r\n    cssVars() {\r\n      let status = undefined;\r\n      if (this.createQuestionState.showForm) {\r\n        status = \"Creating New Question\";\r\n      } else if (this.editQuestionState.showForm) {\r\n        status = \"Editing Question\";\r\n      }\r\n      return {\r\n        \"--text\": JSON.stringify(status),\r\n      };\r\n    },\r\n    filteredQuestions() {\r\n      let query = this.questionSearch.toLowerCase();\r\n\r\n      if (query.length > 0) {\r\n        return this.Schema.TestQuestions.filter(\r\n          (q) =>\r\n            q[\"marker_remarks\"].toLowerCase().indexOf(query) > -1 ||\r\n            q[\"editor_comments\"].toLowerCase().indexOf(query) > -1\r\n        );\r\n      } else {\r\n        return this.Schema.TestQuestions;\r\n      }\r\n    },\r\n    uniqueTestTypes() {\r\n      // return this.AllTestTypes.map((r) => r[\"test_type_name\"]);\r\n      return [\r\n        \"acadfad\",\r\n        \"adsfadfa\",\r\n        \"adsfasdfa\",\r\n        \"acadfad\",\r\n        \"adsfadfa\",\r\n        \"adsfasdfa\",\r\n        \"acadfad\",\r\n        \"adsfadfa\",\r\n        \"adsfasdfa\",\r\n        \"acadfad\",\r\n        \"adsfadfa\",\r\n        \"adsfasdfa\",\r\n        \"acadfad\",\r\n        \"adsfadfa\",\r\n        \"adsfasdfa\",\r\n      ]\r\n    },\r\n    showQuestionView() {\r\n      return (\r\n        !this.createQuestionState.showForm && !this.editQuestionState.showForm\r\n      );\r\n    },\r\n    editorHeader() {\r\n      if (this.createQuestionState.showForm) {\r\n        return `Creating New Question for ${this.testTypeToFilter}`;\r\n      } else if (this.editQuestionState.showForm) {\r\n        return `Editing Question`;\r\n      } else {\r\n        return `${this.testTypeToFilter} Questions`;\r\n      }\r\n    },\r\n  },\r\n  watch: {\r\n    testTypeToFilter: function () {\r\n      Repository.get(`test-type/${this.testTypeToFilter}`).then((r) => {\r\n        this.Schema = r.data;\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"sass\" scoped>\r\n.schema-editor-container\r\n    background: white\r\n    height: 640px\r\n    width: 640px\r\n    padding: 64px\r\n    margin: 64px auto\r\n\r\n.proof_table_heading > td\r\n  border: 1px solid rgba(0, 0, 0, 0.1)\r\n  padding: 10px\r\n  border-collapse: collapse\r\n.proof_table\r\n  width: 100%\r\n\r\n.text-align\r\n  display: flex\r\n  align-items: baseline\r\n.text-align > span\r\n  font-size: x-large\r\n\r\n.table_btns button\r\n  min-width: 100px\r\n  line-height: 30px\r\n  font-size: 14px\r\n  height: 30px\r\n  color: white\r\n  background: rgba(0, 179, 115, 1)\r\n  border-radius: 22px\r\n  text-align: center\r\n  transition: 0.5s\r\n  border: none\r\n\r\n.table_btns button:hover\r\n  text-decoration: none\r\n  color: white\r\n  background: #008F5C\r\n.table_btns\r\n  display: flex\r\n  \r\n.schema-container\r\n  display: grid\r\n  grid-template-columns: 1fr 2fr\r\n  grid-column-gap: 24px\r\n  margin: 94px 120px 64px 120px\r\n\r\n.tt-drop-down\r\n  position: absolute\r\n  margin-left: 120px\r\n  margin-top: 30px\r\n  overflow-y: scroll\r\n  max-height: 400px\r\n\r\n.schema-container-item\r\n  background: white\r\n  padding: 32px\r\n\r\n.form-label\r\n  font-size: 12px\r\n  line-height: 16px\r\n  color: #001E62\r\n\r\n\r\n.thin-text-area\r\n  width: 100%\r\n  background: #FFFFFF\r\n  border: 1px solid rgba(0, 0, 0, 0.1)\r\n  box-sizing: border-box\r\n  border-radius: 22px\r\n  padding: 8px\r\n  color: #001E62\r\n  padding-left: 22px\r\n  margin: 0 0 12px 0\r\n\r\n.thicc-text-area\r\n  width: 100%\r\n  background: #FFFFFF\r\n  border: 1px solid rgba(0, 0, 0, 0.1)\r\n  box-sizing: border-box\r\n  border-radius: 22px\r\n  padding: 8px\r\n  color: #001E62\r\n  padding-left: 22px\r\n  min-height: 64px\r\n  margin: 0 0 12px 0\r\n\r\n.thin-text-area:focus\r\n  box-shadow: none\r\n  border: 2px solid #00B373\r\n\r\n.test-type-select-container\r\n  display: flex\r\n  justify-content: space-around\r\n  margin: 40px 80px 0\r\n  max-width: 100%\r\n\r\n.create-question-form\r\n  background: white\r\n\r\n.test-question-list\r\n  position: relative\r\n\r\n.test-question-list::before\r\n  position: absolute\r\n  content: var(--text)\r\n  text-align: center\r\n  background: rgba(0, 30, 98, 1)\r\n  color: white\r\n  width: 100%\r\n  height: auto\r\n  padding: 2px\r\n  font-size: 10pt\r\n  left: -0px\r\n  top: -24px\r\n\r\n@media only screen and (max-width: 900px)\r\n  .schema-container\r\n    grid-template-columns: 1fr\r\n    margin: 16px\r\n\r\n  .schema-container-item\r\n    margin: 16px\r\n</style>\r\n"]}]}