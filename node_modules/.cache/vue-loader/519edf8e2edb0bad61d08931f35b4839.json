{"remainingRequest":"/Users/afeeza/Downloads/Test-Tracker-Frontend/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/afeeza/Downloads/Test-Tracker-Frontend/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/afeeza/Downloads/Test-Tracker-Frontend/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/afeeza/Downloads/Test-Tracker-Frontend/src/views/SchemaEditor.vue?vue&type=template&id=f54a5eb0&scoped=true&","dependencies":[{"path":"/Users/afeeza/Downloads/Test-Tracker-Frontend/src/views/SchemaEditor.vue","mtime":1654092290000},{"path":"/Users/afeeza/Downloads/Test-Tracker-Frontend/node_modules/cache-loader/dist/cjs.js","mtime":1654415110733},{"path":"/Users/afeeza/Downloads/Test-Tracker-Frontend/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1654415111852},{"path":"/Users/afeeza/Downloads/Test-Tracker-Frontend/node_modules/cache-loader/dist/cjs.js","mtime":1654415110733},{"path":"/Users/afeeza/Downloads/Test-Tracker-Frontend/node_modules/vue-loader/lib/index.js","mtime":1654415111466}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}