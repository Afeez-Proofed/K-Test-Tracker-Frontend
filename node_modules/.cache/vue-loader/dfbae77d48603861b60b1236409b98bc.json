{"remainingRequest":"C:\\Users\\lucky\\Desktop\\K-Test-Tracker-Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\lucky\\Desktop\\K-Test-Tracker-Frontend\\src\\views\\SchemaEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\lucky\\Desktop\\K-Test-Tracker-Frontend\\src\\views\\SchemaEditor.vue","mtime":1655277426995},{"path":"C:\\Users\\lucky\\Desktop\\K-Test-Tracker-Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1655277640760},{"path":"C:\\Users\\lucky\\Desktop\\K-Test-Tracker-Frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1655277642997},{"path":"C:\\Users\\lucky\\Desktop\\K-Test-Tracker-Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1655277640760},{"path":"C:\\Users\\lucky\\Desktop\\K-Test-Tracker-Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1655277613826}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KDQppbXBvcnQgUmVwb3NpdG9yeSBmcm9tICIuLi9zZXJ2aWNlcy9SZXBvc2l0b3J5IjsNCmltcG9ydCBUZXN0UXVlc3Rpb24gZnJvbSAiLi4vY29tcG9uZW50cy9UZXN0UXVlc3Rpb24udnVlIjsNCmltcG9ydCBEYXRhUm93IGZyb20gIi4uL2NvbXBvbmVudHMvRGF0YVJvdy52dWUiOw0KaW1wb3J0IFRUTW9kYWwgZnJvbSAiLi4vY29tcG9uZW50cy9UVE1vZGFsLnZ1ZSI7DQppbXBvcnQgVGVzdFRhYmxlIGZyb20gIi4uL2NvbXBvbmVudHMvVGVzdFRhYmxlLnZ1ZSI7DQppbXBvcnQgRHJvcGRvd24gZnJvbSAiLi4vY29tcG9uZW50cy9Ecm9wZG93bi52dWUiOw0KLy8gaW1wb3J0IGUgZnJvbSAiZXhwcmVzcyI7DQoNCmV4cG9ydCBkZWZhdWx0IHsNCiAgbmFtZTogIlNjaGVtYUVkaXRvciIsDQogIGNvbXBvbmVudHM6IHsgVGVzdFF1ZXN0aW9uLCBEYXRhUm93LCBUVE1vZGFsLCBUZXN0VGFibGUsIERyb3Bkb3duIH0sDQogIGRhdGEoKSB7DQogICAgcmV0dXJuIHsNCiAgICAgIFNjaGVtYToge30sDQogICAgICBxdWVzdGlvblNlYXJjaDogIiIsDQogICAgICBzaG93RGVsZXRlTW9kYWw6IGZhbHNlLA0KICAgICAgZWRpdFF1ZXN0aW9uU3RhdGU6IHsNCiAgICAgICAgc2hvd0Zvcm06IGZhbHNlLA0KICAgICAgICBxdWVzdGlvbklEOiAxMzAsDQogICAgICB9LA0KICAgICAgQWxsVGVzdFR5cGVzOiBbXSwNCiAgICAgIHRlc3RUeXBlVG9GaWx0ZXI6ICJFRURTVFIwMSIsDQogICAgICBjcmVhdGVRdWVzdGlvblN0YXRlOiB7DQogICAgICAgIHNob3dGb3JtOiBmYWxzZSwNCiAgICAgICAgbmV3UXVlc3Rpb25Gb3JtOiB7DQogICAgICAgICAgcXVlc3Rpb25faWRlbnRpZmllcjogIiIsDQogICAgICAgICAgbWFya2VyX3JlbWFya3M6ICIiLA0KICAgICAgICAgIGVkaXRvcl9jb21tZW50czogIiIsDQogICAgICAgICAgbWFya3M6IDEsDQogICAgICAgICAgaXNzdWVfdHlwZTogIiIsDQogICAgICAgICAgdGVzdF90eXBlOiAtMSwNCiAgICAgICAgfSwNCiAgICAgIH0sDQogICAgfTsNCiAgfSwNCg0KICBjcmVhdGVkKCkgew0KICAgIFJlcG9zaXRvcnkuZ2V0KGB0ZXN0LXR5cGUvJHt0aGlzLnRlc3RUeXBlVG9GaWx0ZXJ9YCkudGhlbigocikgPT4gew0KICAgICAgdGhpcy5TY2hlbWEgPSByLmRhdGE7DQogICAgfSk7DQoNCiAgICBSZXBvc2l0b3J5LmdldCgidGVzdC10eXBlcyIpLnRoZW4oKHIpID0+IHsNCiAgICAgIHRoaXMuQWxsVGVzdFR5cGVzID0gci5kYXRhOw0KICAgIH0pOw0KICB9LA0KICBtZXRob2RzOiB7DQogICAgDQogICAgdHJpZ2dlclRRRm9ybShTY2hlbWFJRCkgew0KICAgICAgdGhpcy5lZGl0UXVlc3Rpb25TdGF0ZS5zaG93Rm9ybSA9IHRydWU7DQogICAgICB0aGlzLmVkaXRRdWVzdGlvblN0YXRlLnF1ZXN0aW9uSUQgPSBTY2hlbWFJRDsNCiAgICB9LA0KICAgIGRlbGV0ZVF1ZXN0aW9uKFNjaGVtYUlEKSB7DQogICAgICBSZXBvc2l0b3J5LmRlbGV0ZShgdGVzdC1xdWVzdGlvbi8ke1NjaGVtYUlEfWApDQogICAgICAgIC50aGVuKChyKSA9PiB7DQogICAgICAgICAgcjsNCiAgICAgICAgICB0aGlzLlNjaGVtYS5UZXN0UXVlc3Rpb25zID0gdGhpcy5TY2hlbWEuVGVzdFF1ZXN0aW9ucy5maWx0ZXIoDQogICAgICAgICAgICAocSkgPT4gcVsiU2NoZW1hSUQiXSAhPSBTY2hlbWFJRA0KICAgICAgICAgICk7DQoNCiAgICAgICAgICB0aGlzLiRub3RpZnkoew0KICAgICAgICAgICAgdGl0bGU6ICJTdWNjZXNzZnVsbHkgRGVsZXRlZCIsDQogICAgICAgICAgICB0ZXh0OiAiIiwNCiAgICAgICAgICAgIHR5cGU6ICJpbmZvIiwNCiAgICAgICAgICB9KTsNCiAgICAgICAgfSkNCiAgICAgICAgLmNhdGNoKChlKSA9PiB7DQogICAgICAgICAgdGhpcy4kbm90aWZ5KHsNCiAgICAgICAgICAgIHRpdGxlOiAiRXJyb3IgRGVsZXRpbmciLA0KICAgICAgICAgICAgdGV4dDogZSwNCiAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsDQogICAgICAgICAgfSk7DQogICAgICAgIH0pOw0KICAgIH0sDQoNCiAgICBjcmVhdGVUZXN0UXVlc3Rpb24oKSB7DQogICAgICBsZXQgbmV3UURhdGEgPSB0aGlzLmNyZWF0ZVF1ZXN0aW9uU3RhdGUubmV3UXVlc3Rpb25Gb3JtOw0KICAgICAgbGV0IHBheWxvYWQgPSB7DQogICAgICAgIHF1ZXN0aW9uX2lkZW50aWZpZXI6IG5ld1FEYXRhLnF1ZXN0aW9uX2lkZW50aWZpZXIsDQogICAgICAgIG1hcmtlcl9yZW1hcmtzOiBuZXdRRGF0YS5tYXJrZXJfcmVtYXJrcywNCiAgICAgICAgZWRpdG9yX2NvbW1lbnRzOiBuZXdRRGF0YS5lZGl0b3JfY29tbWVudHMsDQogICAgICAgIG1hcmtzOiBwYXJzZUludChuZXdRRGF0YS5tYXJrcyksDQogICAgICAgIGlzc3VlX3R5cGU6ICIiLA0KICAgICAgICB0ZXN0X3R5cGU6IHRoaXMuU2NoZW1hLklELA0KICAgICAgfTsNCiAgICAgIFJlcG9zaXRvcnkucG9zdCgidGVzdC1xdWVzdGlvbiIsIHBheWxvYWQpDQogICAgICAgIC50aGVuKChyKSA9PiB7DQogICAgICAgICAgdGhpcy4kbm90aWZ5KHsNCiAgICAgICAgICAgIHRpdGxlOiAiU3VjY2Vzc2Z1bGx5IENyZWF0ZWQiLA0KICAgICAgICAgICAgdGV4dDogci5kYXRhLA0KICAgICAgICAgICAgdHlwZTogImluZm8iLA0KICAgICAgICAgIH0pOw0KDQogICAgICAgICAgdGhpcy5yZXNldENyZWF0ZVN0YXRlKCk7DQoNCiAgICAgICAgICAvL3JlbG9hZCBzY2hlbWENCiAgICAgICAgICBSZXBvc2l0b3J5LmdldChgdGVzdC10eXBlLyR7dGhpcy50ZXN0VHlwZVRvRmlsdGVyfWApLnRoZW4oKHIpID0+IHsNCiAgICAgICAgICAgIHRoaXMuU2NoZW1hID0gci5kYXRhOw0KICAgICAgICAgIH0pOw0KICAgICAgICB9KQ0KICAgICAgICAuY2F0Y2goKGUpID0+IHsNCiAgICAgICAgICB0aGlzLiRub3RpZnkoew0KICAgICAgICAgICAgdGl0bGU6ICJUZXN0IENyZWF0aW9uIFdhcyBVbnN1Y2Nlc3NmdWwiLA0KICAgICAgICAgICAgdGV4dDogZSwNCiAgICAgICAgICAgIHR5cGU6ICJ3YXJuIiwNCiAgICAgICAgICB9KTsNCiAgICAgICAgfSk7DQogICAgfSwNCg0KICAgIHVwZGF0ZVRlc3RRdWVzdGlvbigpIHsNCiAgICAgIGlmICghdGhpcy5lZGl0UXVlc3Rpb25TdGF0ZS5zaG93Rm9ybSkgcmV0dXJuOw0KDQogICAgICBsZXQgdGVzdFF1ZXN0aW9uID0gdGhpcy5TY2hlbWEuVGVzdFF1ZXN0aW9ucy5maWx0ZXIoDQogICAgICAgIChxKSA9PiBxWyJTY2hlbWFJRCJdID09IHRoaXMuZWRpdFF1ZXN0aW9uU3RhdGUucXVlc3Rpb25JRA0KICAgICAgKVswXTsNCg0KICAgICAgbGV0IHBheWxvYWQgPSB7DQogICAgICAgIHF1ZXN0aW9uX2lkZW50aWZpZXI6IHRlc3RRdWVzdGlvblsicXVlc3Rpb25faWQiXSwNCiAgICAgICAgbWFya2VyX3JlbWFya3M6IHRlc3RRdWVzdGlvbi5tYXJrZXJfcmVtYXJrcywNCiAgICAgICAgZWRpdG9yX2NvbW1lbnRzOiB0ZXN0UXVlc3Rpb24uZWRpdG9yX2NvbW1lbnRzLA0KICAgICAgICBpbmZvX3VybDogIiIsDQogICAgICAgIG1hcmtzOiBwYXJzZUludCh0ZXN0UXVlc3Rpb24ubWFya3MpLA0KICAgICAgICBpc3N1ZV90eXBlOiAiIiwNCiAgICAgICAgdGVzdF90eXBlOiB0ZXN0UXVlc3Rpb24uVGVzdFR5cGUuaWQsDQogICAgICB9Ow0KDQogICAgICBSZXBvc2l0b3J5LnB1dCgNCiAgICAgICAgYHRlc3QtcXVlc3Rpb24vJHt0aGlzLmVkaXRRdWVzdGlvblN0YXRlLnF1ZXN0aW9uSUR9YCwNCiAgICAgICAgcGF5bG9hZA0KICAgICAgKQ0KICAgICAgICAudGhlbigocikgPT4gew0KICAgICAgICAgIHI7DQogICAgICAgICAgdGhpcy5lZGl0UXVlc3Rpb25TdGF0ZS5zaG93Rm9ybSA9IGZhbHNlOw0KICAgICAgICAgIHRoaXMuZWRpdFF1ZXN0aW9uU3RhdGUucXVlc3Rpb25JRCA9IDA7DQoNCiAgICAgICAgICB0aGlzLiRub3RpZnkoew0KICAgICAgICAgICAgdGl0bGU6ICJTdWNjZXNzZnVsbHkgVXBkYXRlZCIsDQogICAgICAgICAgICB0ZXh0OiAiIiwNCiAgICAgICAgICAgIHR5cGU6ICJpbmZvIiwNCiAgICAgICAgICB9KTsNCiAgICAgICAgfSkNCiAgICAgICAgLmNhdGNoKChlKSA9PiB7DQogICAgICAgICAgdGhpcy4kbm90aWZ5KHsNCiAgICAgICAgICAgIHRpdGxlOiAiRXJyb3IgVXBkYXRpbmciLA0KICAgICAgICAgICAgdGV4dDogZSwNCiAgICAgICAgICAgIHR5cGU6ICJlcnJvciIsDQogICAgICAgICAgfSk7DQogICAgICAgIH0pOw0KICAgIH0sDQogICAgcmVzZXRDcmVhdGVTdGF0ZSgpIHsNCiAgICAgIHRoaXMuY3JlYXRlUXVlc3Rpb25TdGF0ZSA9IHsNCiAgICAgICAgc2hvd0Zvcm06IGZhbHNlLA0KICAgICAgICBuZXdRdWVzdGlvbkZvcm06IHsNCiAgICAgICAgICBxdWVzdGlvbl9pZGVudGlmaWVyOiAiIiwNCiAgICAgICAgICBtYXJrZXJfcmVtYXJrczogIiIsDQogICAgICAgICAgZWRpdG9yX2NvbW1lbnRzOiAiIiwNCiAgICAgICAgICBtYXJrczogMSwNCiAgICAgICAgICBpc3N1ZV90eXBlOiAiIiwNCiAgICAgICAgICB0ZXN0X3R5cGU6IC0xLA0KICAgICAgICB9LA0KICAgICAgfTsNCiAgICB9LA0KICB9LA0KICBjb21wdXRlZDogew0KICAgIGNzc1ZhcnMoKSB7DQogICAgICBsZXQgc3RhdHVzID0gdW5kZWZpbmVkOw0KICAgICAgaWYgKHRoaXMuY3JlYXRlUXVlc3Rpb25TdGF0ZS5zaG93Rm9ybSkgew0KICAgICAgICBzdGF0dXMgPSAiQ3JlYXRpbmcgTmV3IFF1ZXN0aW9uIjsNCiAgICAgIH0gZWxzZSBpZiAodGhpcy5lZGl0UXVlc3Rpb25TdGF0ZS5zaG93Rm9ybSkgew0KICAgICAgICBzdGF0dXMgPSAiRWRpdGluZyBRdWVzdGlvbiI7DQogICAgICB9DQogICAgICByZXR1cm4gew0KICAgICAgICAiLS10ZXh0IjogSlNPTi5zdHJpbmdpZnkoc3RhdHVzKSwNCiAgICAgIH07DQogICAgfSwNCiAgICBmaWx0ZXJlZFF1ZXN0aW9ucygpIHsNCiAgICAgIGxldCBxdWVyeSA9IHRoaXMucXVlc3Rpb25TZWFyY2gudG9Mb3dlckNhc2UoKTsNCg0KICAgICAgaWYgKHF1ZXJ5Lmxlbmd0aCA+IDApIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuU2NoZW1hLlRlc3RRdWVzdGlvbnMuZmlsdGVyKA0KICAgICAgICAgIChxKSA9Pg0KICAgICAgICAgICAgcVsibWFya2VyX3JlbWFya3MiXS50b0xvd2VyQ2FzZSgpLmluZGV4T2YocXVlcnkpID4gLTEgfHwNCiAgICAgICAgICAgIHFbImVkaXRvcl9jb21tZW50cyJdLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihxdWVyeSkgPiAtMQ0KICAgICAgICApOw0KICAgICAgfSBlbHNlIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuU2NoZW1hLlRlc3RRdWVzdGlvbnM7DQogICAgICB9DQogICAgfSwNCiAgICB1bmlxdWVUZXN0VHlwZXMoKSB7DQogICAgICAvLyByZXR1cm4gdGhpcy5BbGxUZXN0VHlwZXMubWFwKChyKSA9PiByWyJ0ZXN0X3R5cGVfbmFtZSJdKTsNCiAgICAgIHJldHVybiBbDQogICAgICAgICJhY2FkZmFkIiwNCiAgICAgICAgImFkc2ZhZGZhIiwNCiAgICAgICAgImFkc2Zhc2RmYSIsDQogICAgICAgICJhY2FkZmFkIiwNCiAgICAgICAgImFkc2ZhZGZhIiwNCiAgICAgICAgImFkc2Zhc2RmYSIsDQogICAgICAgICJhY2FkZmFkIiwNCiAgICAgICAgImFkc2ZhZGZhIiwNCiAgICAgICAgImFkc2Zhc2RmYSIsDQogICAgICAgICJhY2FkZmFkIiwNCiAgICAgICAgImFkc2ZhZGZhIiwNCiAgICAgICAgImFkc2Zhc2RmYSIsDQogICAgICAgICJhY2FkZmFkIiwNCiAgICAgICAgImFkc2ZhZGZhIiwNCiAgICAgICAgImFkc2Zhc2RmYSIsDQogICAgICBdDQogICAgfSwNCiAgICBzaG93UXVlc3Rpb25WaWV3KCkgew0KICAgICAgcmV0dXJuICgNCiAgICAgICAgIXRoaXMuY3JlYXRlUXVlc3Rpb25TdGF0ZS5zaG93Rm9ybSAmJiAhdGhpcy5lZGl0UXVlc3Rpb25TdGF0ZS5zaG93Rm9ybQ0KICAgICAgKTsNCiAgICB9LA0KICAgIGVkaXRvckhlYWRlcigpIHsNCiAgICAgIGlmICh0aGlzLmNyZWF0ZVF1ZXN0aW9uU3RhdGUuc2hvd0Zvcm0pIHsNCiAgICAgICAgcmV0dXJuIGBDcmVhdGluZyBOZXcgUXVlc3Rpb24gZm9yICR7dGhpcy50ZXN0VHlwZVRvRmlsdGVyfWA7DQogICAgICB9IGVsc2UgaWYgKHRoaXMuZWRpdFF1ZXN0aW9uU3RhdGUuc2hvd0Zvcm0pIHsNCiAgICAgICAgcmV0dXJuIGBFZGl0aW5nIFF1ZXN0aW9uYDsNCiAgICAgIH0gZWxzZSB7DQogICAgICAgIHJldHVybiBgJHt0aGlzLnRlc3RUeXBlVG9GaWx0ZXJ9IFF1ZXN0aW9uc2A7DQogICAgICB9DQogICAgfSwNCiAgfSwNCiAgd2F0Y2g6IHsNCiAgICB0ZXN0VHlwZVRvRmlsdGVyOiBmdW5jdGlvbiAoKSB7DQogICAgICBSZXBvc2l0b3J5LmdldChgdGVzdC10eXBlLyR7dGhpcy50ZXN0VHlwZVRvRmlsdGVyfWApLnRoZW4oKHIpID0+IHsNCiAgICAgICAgdGhpcy5TY2hlbWEgPSByLmRhdGE7DQogICAgICB9KTsNCiAgICB9LA0KICB9LA0KfTsNCg=="},{"version":3,"sources":["SchemaEditor.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"SchemaEditor.vue","sourceRoot":"src/views","sourcesContent":["<template>\r\n  <div :style=\"cssVars\">\r\n    <!--\r\n    <TTModal\r\n      v-show=\"showDeleteModal\"\r\n      @onConfirm=\"deleteTestQuestion()\"\r\n      header=\"Are you Sure?\"\r\n      message=\"Yes mate\"\r\n    />\r\n    -->\r\n    <Dropdown\r\n  \r\n      :selected=\"testTypeToFilter\"\r\n      v-on:input=\"testTypeToFilter = $event\"\r\n      :options=\"uniqueTestTypes\"\r\n      class=\"tt-drop-down\"\r\n      title=\"Select Test Type\"\r\n    />\r\n    <div class=\"schema-container\">\r\n      <div\r\n        class=\"test-type-overview schema-container-item\"\r\n        style=\"max-height: 500px\"\r\n      >\r\n        <p class=\"card-header-text\">{{ Schema.test_type_name }}</p>\r\n        <p style=\"font-size: 0.9em; margin-top: 0\">\r\n          {{ Schema.test_type_description }}\r\n        </p>\r\n        <DataRow :fieldName=\"'Total Marks'\" :fieldData=\"Schema.total_marks\" />\r\n        <DataRow\r\n          :fieldName=\"'Payment Amount'\"\r\n          :fieldData=\"`$${(Schema.payment_amount_cents / 100).toFixed(2)}`\"\r\n        />\r\n        <DataRow\r\n          :fieldName=\"'Show Granular Feedback'\"\r\n          :fieldData=\"Schema.show_granular ? 'Yes' : 'No'\"\r\n        />\r\n        <DataRow\r\n          :fieldName=\"'High Pass Rate'\"\r\n          :fieldData=\"`${Schema.high_pass_rate * 100}%`\"\r\n        />\r\n        <DataRow\r\n          :fieldName=\"'Pass Rate'\"\r\n          :fieldData=\"`${Schema.pass_rate * 100}%`\"\r\n        />\r\n        <DataRow\r\n          :fieldName=\"'Fail Rate'\"\r\n          :fieldData=\"`${Schema.fail_rate * 100}%`\"\r\n        />\r\n      </div>\r\n\r\n      <div class=\"test-question-list schema-container-item\">\r\n        <p class=\"subline\" v-show=\"editQuestionState.showForm\">Editing</p>\r\n        <p>\r\n          <span\r\n            class=\"card-header-text pointer\"\r\n            :style=\"\r\n              !editQuestionState.showForm\r\n                ? 'display: flex; justify-content: space-between'\r\n                : ''\r\n            \"\r\n            @click=\"editQuestionState.showForm = false\"\r\n          >\r\n            <span>{{ editorHeader }}</span\r\n            ><span\r\n              v-show=\"showQuestionView\"\r\n              @click=\"createQuestionState.showForm = true\"\r\n              class=\"subline\"\r\n              style=\"font-family: sans-serif\"\r\n            >\r\n              + New Question\r\n            </span>\r\n          </span>\r\n          <span class=\"card-header-text\" v-show=\"editQuestionState.showForm\">\r\n            / ID {{ editQuestionState.questionID }}\r\n          </span>\r\n        </p>\r\n\r\n        <!-- question creator -->\r\n        <div v-if=\"createQuestionState.showForm\" class=\"create-question-form\">\r\n          <span class=\"form-label\">Question Identifier</span>\r\n          <input\r\n            type=\"text\"\r\n            class=\"thin-text-area\"\r\n            placeholder=\"Q ID\"\r\n            v-model=\"createQuestionState.newQuestionForm.question_identifier\"\r\n          />\r\n\r\n          <span class=\"form-label\">Marks</span>\r\n          <input\r\n            type=\"number\"\r\n            class=\"thin-text-area\"\r\n            placeholder=\"marks\"\r\n            v-model=\"createQuestionState.newQuestionForm.marks\"\r\n          />\r\n\r\n          <span class=\"form-label\">Marker Remarks</span>\r\n          <textarea\r\n            class=\"thicc-text-area\"\r\n            placeholder=\"Marker Remarks\"\r\n            v-model=\"createQuestionState.newQuestionForm.marker_remarks\"\r\n          />\r\n\r\n          <span class=\"form-label\">Editor Feedback</span>\r\n          <textarea\r\n            class=\"thicc-text-area\"\r\n            placeholder=\"Editor Feedback\"\r\n            v-model=\"createQuestionState.newQuestionForm.editor_comments\"\r\n          />\r\n          <div\r\n            class=\"secondary-button pointer\"\r\n            style=\"height: 36px; line-height: 36px\"\r\n            @click=\"createTestQuestion\"\r\n          >\r\n            Create Test Question for {{ testTypeToFilter }}\r\n          </div>\r\n          <div\r\n            @click=\"createQuestionState.showForm = false\"\r\n            class=\"tertiary-button pointer\"\r\n            style=\"height: 36px; line-height: 36px; margin-top: 12px\"\r\n          >\r\n            Return to Questions\r\n          </div>\r\n        </div>\r\n\r\n        <!-- question editor -->\r\n\r\n        <div v-if=\"editQuestionState.showForm\">\r\n          <span class=\"form-label\">Question Identifier</span>\r\n          <input\r\n            type=\"text\"\r\n            class=\"thin-text-area\"\r\n            placeholder=\"Q ID\"\r\n            v-model=\"\r\n              Schema.TestQuestions.filter(\r\n                (q) => q['SchemaID'] == editQuestionState.questionID\r\n              )[0]['question_id']\r\n            \"\r\n          />\r\n\r\n          <span class=\"form-label\">Marks</span>\r\n          <input\r\n            type=\"number\"\r\n            class=\"thin-text-area\"\r\n            placeholder=\"marks\"\r\n            v-model=\"\r\n              Schema.TestQuestions.filter(\r\n                (q) => q['SchemaID'] == editQuestionState.questionID\r\n              )[0]['marks']\r\n            \"\r\n          />\r\n\r\n          <span class=\"form-label\">Marker Remarks</span>\r\n          <textarea\r\n            class=\"thicc-text-area\"\r\n            placeholder=\"Marker Remarks\"\r\n            v-model=\"\r\n              Schema.TestQuestions.filter(\r\n                (q) => q['SchemaID'] == editQuestionState.questionID\r\n              )[0]['marker_remarks']\r\n            \"\r\n          />\r\n\r\n          <span class=\"form-label\">Editor Feedback</span>\r\n          <textarea\r\n            class=\"thicc-text-area\"\r\n            placeholder=\"Editor Feedback\"\r\n            v-model=\"\r\n              Schema.TestQuestions.filter(\r\n                (q) => q['SchemaID'] == editQuestionState.questionID\r\n              )[0]['editor_comments']\r\n            \"\r\n          />\r\n          <div\r\n            class=\"secondary-button pointer\"\r\n            style=\"height: 36px; line-height: 36px\"\r\n            @click=\"updateTestQuestion\"\r\n          >\r\n            Update Test Question\r\n          </div>\r\n          <div\r\n            @click=\"editQuestionState.showForm = false\"\r\n            class=\"tertiary-button pointer\"\r\n            style=\"height: 36px; line-height: 36px; margin-top: 12px\"\r\n          >\r\n            Return to Questions\r\n          </div>\r\n        </div>\r\n\r\n        <div v-show=\"showQuestionView\">\r\n          <input\r\n            v-model=\"questionSearch\"\r\n            class=\"thin-text-area\"\r\n            placeholder=\"Search\"\r\n          />\r\n\r\n          <div v-if=\"testTypeToFilter !== 'EEDSTR01'\" v-for=\"(question, index) in filteredQuestions\" :key=\"index\">\r\n            <TestQuestion\r\n              :testQuestion=\"question\"\r\n              @updateQ=\"triggerTQForm\"\r\n              @deleteQ=\"deleteQuestion\"\r\n            />\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Repository from \"../services/Repository\";\r\nimport TestQuestion from \"../components/TestQuestion.vue\";\r\nimport DataRow from \"../components/DataRow.vue\";\r\nimport TTModal from \"../components/TTModal.vue\";\r\nimport TestTable from \"../components/TestTable.vue\";\r\nimport Dropdown from \"../components/Dropdown.vue\";\r\n// import e from \"express\";\r\n\r\nexport default {\r\n  name: \"SchemaEditor\",\r\n  components: { TestQuestion, DataRow, TTModal, TestTable, Dropdown },\r\n  data() {\r\n    return {\r\n      Schema: {},\r\n      questionSearch: \"\",\r\n      showDeleteModal: false,\r\n      editQuestionState: {\r\n        showForm: false,\r\n        questionID: 130,\r\n      },\r\n      AllTestTypes: [],\r\n      testTypeToFilter: \"EEDSTR01\",\r\n      createQuestionState: {\r\n        showForm: false,\r\n        newQuestionForm: {\r\n          question_identifier: \"\",\r\n          marker_remarks: \"\",\r\n          editor_comments: \"\",\r\n          marks: 1,\r\n          issue_type: \"\",\r\n          test_type: -1,\r\n        },\r\n      },\r\n    };\r\n  },\r\n\r\n  created() {\r\n    Repository.get(`test-type/${this.testTypeToFilter}`).then((r) => {\r\n      this.Schema = r.data;\r\n    });\r\n\r\n    Repository.get(\"test-types\").then((r) => {\r\n      this.AllTestTypes = r.data;\r\n    });\r\n  },\r\n  methods: {\r\n    \r\n    triggerTQForm(SchemaID) {\r\n      this.editQuestionState.showForm = true;\r\n      this.editQuestionState.questionID = SchemaID;\r\n    },\r\n    deleteQuestion(SchemaID) {\r\n      Repository.delete(`test-question/${SchemaID}`)\r\n        .then((r) => {\r\n          r;\r\n          this.Schema.TestQuestions = this.Schema.TestQuestions.filter(\r\n            (q) => q[\"SchemaID\"] != SchemaID\r\n          );\r\n\r\n          this.$notify({\r\n            title: \"Successfully Deleted\",\r\n            text: \"\",\r\n            type: \"info\",\r\n          });\r\n        })\r\n        .catch((e) => {\r\n          this.$notify({\r\n            title: \"Error Deleting\",\r\n            text: e,\r\n            type: \"error\",\r\n          });\r\n        });\r\n    },\r\n\r\n    createTestQuestion() {\r\n      let newQData = this.createQuestionState.newQuestionForm;\r\n      let payload = {\r\n        question_identifier: newQData.question_identifier,\r\n        marker_remarks: newQData.marker_remarks,\r\n        editor_comments: newQData.editor_comments,\r\n        marks: parseInt(newQData.marks),\r\n        issue_type: \"\",\r\n        test_type: this.Schema.ID,\r\n      };\r\n      Repository.post(\"test-question\", payload)\r\n        .then((r) => {\r\n          this.$notify({\r\n            title: \"Successfully Created\",\r\n            text: r.data,\r\n            type: \"info\",\r\n          });\r\n\r\n          this.resetCreateState();\r\n\r\n          //reload schema\r\n          Repository.get(`test-type/${this.testTypeToFilter}`).then((r) => {\r\n            this.Schema = r.data;\r\n          });\r\n        })\r\n        .catch((e) => {\r\n          this.$notify({\r\n            title: \"Test Creation Was Unsuccessful\",\r\n            text: e,\r\n            type: \"warn\",\r\n          });\r\n        });\r\n    },\r\n\r\n    updateTestQuestion() {\r\n      if (!this.editQuestionState.showForm) return;\r\n\r\n      let testQuestion = this.Schema.TestQuestions.filter(\r\n        (q) => q[\"SchemaID\"] == this.editQuestionState.questionID\r\n      )[0];\r\n\r\n      let payload = {\r\n        question_identifier: testQuestion[\"question_id\"],\r\n        marker_remarks: testQuestion.marker_remarks,\r\n        editor_comments: testQuestion.editor_comments,\r\n        info_url: \"\",\r\n        marks: parseInt(testQuestion.marks),\r\n        issue_type: \"\",\r\n        test_type: testQuestion.TestType.id,\r\n      };\r\n\r\n      Repository.put(\r\n        `test-question/${this.editQuestionState.questionID}`,\r\n        payload\r\n      )\r\n        .then((r) => {\r\n          r;\r\n          this.editQuestionState.showForm = false;\r\n          this.editQuestionState.questionID = 0;\r\n\r\n          this.$notify({\r\n            title: \"Successfully Updated\",\r\n            text: \"\",\r\n            type: \"info\",\r\n          });\r\n        })\r\n        .catch((e) => {\r\n          this.$notify({\r\n            title: \"Error Updating\",\r\n            text: e,\r\n            type: \"error\",\r\n          });\r\n        });\r\n    },\r\n    resetCreateState() {\r\n      this.createQuestionState = {\r\n        showForm: false,\r\n        newQuestionForm: {\r\n          question_identifier: \"\",\r\n          marker_remarks: \"\",\r\n          editor_comments: \"\",\r\n          marks: 1,\r\n          issue_type: \"\",\r\n          test_type: -1,\r\n        },\r\n      };\r\n    },\r\n  },\r\n  computed: {\r\n    cssVars() {\r\n      let status = undefined;\r\n      if (this.createQuestionState.showForm) {\r\n        status = \"Creating New Question\";\r\n      } else if (this.editQuestionState.showForm) {\r\n        status = \"Editing Question\";\r\n      }\r\n      return {\r\n        \"--text\": JSON.stringify(status),\r\n      };\r\n    },\r\n    filteredQuestions() {\r\n      let query = this.questionSearch.toLowerCase();\r\n\r\n      if (query.length > 0) {\r\n        return this.Schema.TestQuestions.filter(\r\n          (q) =>\r\n            q[\"marker_remarks\"].toLowerCase().indexOf(query) > -1 ||\r\n            q[\"editor_comments\"].toLowerCase().indexOf(query) > -1\r\n        );\r\n      } else {\r\n        return this.Schema.TestQuestions;\r\n      }\r\n    },\r\n    uniqueTestTypes() {\r\n      // return this.AllTestTypes.map((r) => r[\"test_type_name\"]);\r\n      return [\r\n        \"acadfad\",\r\n        \"adsfadfa\",\r\n        \"adsfasdfa\",\r\n        \"acadfad\",\r\n        \"adsfadfa\",\r\n        \"adsfasdfa\",\r\n        \"acadfad\",\r\n        \"adsfadfa\",\r\n        \"adsfasdfa\",\r\n        \"acadfad\",\r\n        \"adsfadfa\",\r\n        \"adsfasdfa\",\r\n        \"acadfad\",\r\n        \"adsfadfa\",\r\n        \"adsfasdfa\",\r\n      ]\r\n    },\r\n    showQuestionView() {\r\n      return (\r\n        !this.createQuestionState.showForm && !this.editQuestionState.showForm\r\n      );\r\n    },\r\n    editorHeader() {\r\n      if (this.createQuestionState.showForm) {\r\n        return `Creating New Question for ${this.testTypeToFilter}`;\r\n      } else if (this.editQuestionState.showForm) {\r\n        return `Editing Question`;\r\n      } else {\r\n        return `${this.testTypeToFilter} Questions`;\r\n      }\r\n    },\r\n  },\r\n  watch: {\r\n    testTypeToFilter: function () {\r\n      Repository.get(`test-type/${this.testTypeToFilter}`).then((r) => {\r\n        this.Schema = r.data;\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"sass\" scoped>\r\n.schema-editor-container\r\n    background: white\r\n    height: 640px\r\n    width: 640px\r\n    padding: 64px\r\n    margin: 64px auto\r\n\r\n\r\n.schema-container\r\n  display: grid\r\n  grid-template-columns: 1fr 2fr\r\n  grid-column-gap: 24px\r\n  margin: 94px 120px 64px 120px\r\n\r\n.tt-drop-down\r\n  position: absolute\r\n  margin-left: 120px\r\n  margin-top: 30px\r\n  overflow-y: scroll\r\n  max-height: 400px\r\n\r\n.schema-container-item\r\n  background: white\r\n  padding: 32px\r\n\r\n.form-label\r\n  font-size: 12px\r\n  line-height: 16px\r\n  color: #001E62\r\n\r\n\r\n.thin-text-area\r\n  width: 100%\r\n  background: #FFFFFF\r\n  border: 1px solid rgba(0, 0, 0, 0.1)\r\n  box-sizing: border-box\r\n  border-radius: 22px\r\n  padding: 8px\r\n  color: #001E62\r\n  padding-left: 22px\r\n  margin: 0 0 12px 0\r\n\r\n.thicc-text-area\r\n  width: 100%\r\n  background: #FFFFFF\r\n  border: 1px solid rgba(0, 0, 0, 0.1)\r\n  box-sizing: border-box\r\n  border-radius: 22px\r\n  padding: 8px\r\n  color: #001E62\r\n  padding-left: 22px\r\n  min-height: 64px\r\n  margin: 0 0 12px 0\r\n\r\n.thin-text-area:focus\r\n  box-shadow: none\r\n  border: 2px solid #00B373\r\n\r\n.test-type-select-container\r\n  display: flex\r\n  justify-content: space-around\r\n  margin: 40px 80px 0\r\n  max-width: 100%\r\n\r\n.create-question-form\r\n  background: white\r\n\r\n.test-question-list\r\n  position: relative\r\n\r\n.test-question-list::before\r\n  position: absolute\r\n  content: var(--text)\r\n  text-align: center\r\n  background: rgba(0, 30, 98, 1)\r\n  color: white\r\n  width: 100%\r\n  height: auto\r\n  padding: 2px\r\n  font-size: 10pt\r\n  left: -0px\r\n  top: -24px\r\n\r\n@media only screen and (max-width: 900px)\r\n  .schema-container\r\n    grid-template-columns: 1fr\r\n    margin: 16px\r\n\r\n  .schema-container-item\r\n    margin: 16px\r\n</style>\r\n"]}]}