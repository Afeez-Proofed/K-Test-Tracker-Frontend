{"remainingRequest":"C:\\Users\\lucky\\Desktop\\K-Test-Tracker-Frontend\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\lucky\\Desktop\\K-Test-Tracker-Frontend\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\lucky\\Desktop\\K-Test-Tracker-Frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\lucky\\Desktop\\K-Test-Tracker-Frontend\\src\\views\\SchemaEditor.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\lucky\\Desktop\\K-Test-Tracker-Frontend\\src\\views\\SchemaEditor.vue","mtime":1655367454879},{"path":"C:\\Users\\lucky\\Desktop\\K-Test-Tracker-Frontend\\babel.config.js","mtime":1655277411022},{"path":"C:\\Users\\lucky\\Desktop\\K-Test-Tracker-Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1655277640760},{"path":"C:\\Users\\lucky\\Desktop\\K-Test-Tracker-Frontend\\node_modules\\babel-loader\\lib\\index.js","mtime":1655277642997},{"path":"C:\\Users\\lucky\\Desktop\\K-Test-Tracker-Frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1655277640760},{"path":"C:\\Users\\lucky\\Desktop\\K-Test-Tracker-Frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":1655277613826}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["SchemaEditor.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div :style=\"cssVars\">\r\n    <!--\r\n    <TTModal\r\n      v-show=\"showDeleteModal\"\r\n      @onConfirm=\"deleteTestQuestion()\"\r\n      header=\"Are you Sure?\"\r\n      message=\"Yes mate\"\r\n    />\r\n    -->\r\n    <Dropdown\r\n  \r\n      :selected=\"testTypeToFilter\"\r\n      v-on:input=\"testTypeToFilter = $event\"\r\n      :options=\"uniqueTestTypes\"\r\n      class=\"tt-drop-down\"\r\n      title=\"Select Test Type\"\r\n    />\r\n    <div class=\"schema-container\">\r\n      <div\r\n        class=\"test-type-overview schema-container-item\"\r\n        style=\"max-height: 500px\"\r\n      >\r\n        <p class=\"card-header-text\">{{ Schema.test_type_name }}</p>\r\n        <p style=\"font-size: 0.9em; margin-top: 0\">\r\n          {{ Schema.test_type_description }}\r\n        </p>\r\n        <DataRow :fieldName=\"'Total Marks'\" :fieldData=\"Schema.total_marks\" />\r\n        <DataRow\r\n          :fieldName=\"'Payment Amount'\"\r\n          :fieldData=\"`$${(Schema.payment_amount_cents / 100).toFixed(2)}`\"\r\n        />\r\n        <DataRow\r\n          :fieldName=\"'Show Granular Feedback'\"\r\n          :fieldData=\"Schema.show_granular ? 'Yes' : 'No'\"\r\n        />\r\n        <DataRow\r\n          :fieldName=\"'High Pass Rate'\"\r\n          :fieldData=\"`${Schema.high_pass_rate * 100}%`\"\r\n        />\r\n        <DataRow\r\n          :fieldName=\"'Pass Rate'\"\r\n          :fieldData=\"`${Schema.pass_rate * 100}%`\"\r\n        />\r\n        <DataRow\r\n          :fieldName=\"'Fail Rate'\"\r\n          :fieldData=\"`${Schema.fail_rate * 100}%`\"\r\n        />\r\n      </div>\r\n      <div class=\"test-question-list schema-container-item\">\r\n        <div class=\"text-align\"><h4>Course Name:</h4>&ensp;<span>Becoming Proofreader</span></div>\r\n        <div class=\"text-align\"><h4>Test Type: </h4>&ensp;<span>Bap-01</span></div>\r\n      <table class=\"proof_table\">\r\n        <!-- v-show=\"Tests.length > 0\" -->\r\n        <thead class=\"proof_table_heading\" >\r\n          <td>Mark ID</td>\r\n          <td>Error Summary</td>\r\n          <td>Error Description/ Internal</td>\r\n          <td>Error Screenshot</td>\r\n          <td>Error Category</td>\r\n          <td>Learner-Facing Content</td>\r\n          <td>Associated Module</td>\r\n          <td>Associated Lesson</td>\r\n          <td>Associated Sub-section of Lesson</td>\r\n          <td>Associated Slide/Heading</td>\r\n        </thead>\r\n        <tr></tr>\r\n        <div></div>\r\n\r\n        \r\n      </table>\r\n\r\n      <div class=\"table_btns\" >\r\n        <button type=\"button\">Save Test</button>\r\n        <button type=\"button\">Mark Test</button>\r\n      </div>\r\n        <p class=\"subline\" v-show=\"editQuestionState.showForm\">Editing</p>\r\n        <p>\r\n          <span\r\n            class=\"card-header-text pointer\"\r\n            :style=\"\r\n              !editQuestionState.showForm\r\n                ? 'display: flex; justify-content: space-between'\r\n                : ''\r\n            \"\r\n            @click=\"editQuestionState.showForm = false\"\r\n          >\r\n            <span>{{ editorHeader }}</span\r\n            ><span\r\n              v-show=\"showQuestionView\"\r\n              @click=\"createQuestionState.showForm = true\"\r\n              class=\"subline\"\r\n              style=\"font-family: sans-serif\"\r\n            >\r\n              + New Question\r\n            </span>\r\n          </span>\r\n          <span class=\"card-header-text\" v-show=\"editQuestionState.showForm\">\r\n            / ID {{ editQuestionState.questionID }}\r\n          </span>\r\n        </p>\r\n\r\n        <!-- question creator -->\r\n        <div v-if=\"createQuestionState.showForm\" class=\"create-question-form\">\r\n          <span class=\"form-label\">Question Identifier</span>\r\n          <input\r\n            type=\"text\"\r\n            class=\"thin-text-area\"\r\n            placeholder=\"Q ID\"\r\n            v-model=\"createQuestionState.newQuestionForm.question_identifier\"\r\n          />\r\n\r\n          <span class=\"form-label\">Marks</span>\r\n          <input\r\n            type=\"number\"\r\n            class=\"thin-text-area\"\r\n            placeholder=\"marks\"\r\n            v-model=\"createQuestionState.newQuestionForm.marks\"\r\n          />\r\n\r\n          <span class=\"form-label\">Marker Remarks</span>\r\n          <textarea\r\n            class=\"thicc-text-area\"\r\n            placeholder=\"Marker Remarks\"\r\n            v-model=\"createQuestionState.newQuestionForm.marker_remarks\"\r\n          />\r\n\r\n          <span class=\"form-label\">Editor Feedback</span>\r\n          <textarea\r\n            class=\"thicc-text-area\"\r\n            placeholder=\"Editor Feedback\"\r\n            v-model=\"createQuestionState.newQuestionForm.editor_comments\"\r\n          />\r\n          <div\r\n            class=\"secondary-button pointer\"\r\n            style=\"height: 36px; line-height: 36px\"\r\n            @click=\"createTestQuestion\"\r\n          >\r\n            Create Test Question for {{ testTypeToFilter }}\r\n          </div>\r\n          <div\r\n            @click=\"createQuestionState.showForm = false\"\r\n            class=\"tertiary-button pointer\"\r\n            style=\"height: 36px; line-height: 36px; margin-top: 12px\"\r\n          >\r\n            Return to Questions\r\n          </div>\r\n        </div>\r\n\r\n        <!-- question editor -->\r\n\r\n        <div v-if=\"editQuestionState.showForm\">\r\n          <span class=\"form-label\">Question Identifier</span>\r\n          <input\r\n            type=\"text\"\r\n            class=\"thin-text-area\"\r\n            placeholder=\"Q ID\"\r\n            v-model=\"\r\n              Schema.TestQuestions.filter(\r\n                (q) => q['SchemaID'] == editQuestionState.questionID\r\n              )[0]['question_id']\r\n            \"\r\n          />\r\n\r\n          <span class=\"form-label\">Marks</span>\r\n          <input\r\n            type=\"number\"\r\n            class=\"thin-text-area\"\r\n            placeholder=\"marks\"\r\n            v-model=\"\r\n              Schema.TestQuestions.filter(\r\n                (q) => q['SchemaID'] == editQuestionState.questionID\r\n              )[0]['marks']\r\n            \"\r\n          />\r\n\r\n          <span class=\"form-label\">Marker Remarks</span>\r\n          <textarea\r\n            class=\"thicc-text-area\"\r\n            placeholder=\"Marker Remarks\"\r\n            v-model=\"\r\n              Schema.TestQuestions.filter(\r\n                (q) => q['SchemaID'] == editQuestionState.questionID\r\n              )[0]['marker_remarks']\r\n            \"\r\n          />\r\n\r\n          <span class=\"form-label\">Editor Feedback</span>\r\n          <textarea\r\n            class=\"thicc-text-area\"\r\n            placeholder=\"Editor Feedback\"\r\n            v-model=\"\r\n              Schema.TestQuestions.filter(\r\n                (q) => q['SchemaID'] == editQuestionState.questionID\r\n              )[0]['editor_comments']\r\n            \"\r\n          />\r\n          <div\r\n            class=\"secondary-button pointer\"\r\n            style=\"height: 36px; line-height: 36px\"\r\n            @click=\"updateTestQuestion\"\r\n          >\r\n            Update Test Question\r\n          </div>\r\n          <div\r\n            @click=\"editQuestionState.showForm = false\"\r\n            class=\"tertiary-button pointer\"\r\n            style=\"height: 36px; line-height: 36px; margin-top: 12px\"\r\n          >\r\n            Return to Questions\r\n          </div>\r\n        </div>\r\n\r\n        <div v-show=\"showQuestionView\">\r\n          <input\r\n            v-model=\"questionSearch\"\r\n            class=\"thin-text-area\"\r\n            placeholder=\"Search\"\r\n          />\r\n\r\n          <div v-if=\"testTypeToFilter !== 'EEDSTR01'\" v-for=\"(question, index) in filteredQuestions\" :key=\"index\">\r\n            <TestQuestion\r\n              :testQuestion=\"question\"\r\n              @updateQ=\"triggerTQForm\"\r\n              @deleteQ=\"deleteQuestion\"\r\n            />\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Repository from \"../services/Repository\";\r\nimport TestQuestion from \"../components/TestQuestion.vue\";\r\nimport DataRow from \"../components/DataRow.vue\";\r\nimport TTModal from \"../components/TTModal.vue\";\r\nimport TestTable from \"../components/TestTable.vue\";\r\nimport Dropdown from \"../components/Dropdown.vue\";\r\n// import e from \"express\";\r\n\r\nexport default {\r\n  name: \"SchemaEditor\",\r\n  components: { TestQuestion, DataRow, TTModal, TestTable, Dropdown },\r\n  data() {\r\n    return {\r\n      Schema: {},\r\n      questionSearch: \"\",\r\n      showDeleteModal: false,\r\n      editQuestionState: {\r\n        showForm: false,\r\n        questionID: 130,\r\n      },\r\n      AllTestTypes: [],\r\n      testTypeToFilter: \"EEDSTR01\",\r\n      createQuestionState: {\r\n        showForm: false,\r\n        newQuestionForm: {\r\n          question_identifier: \"\",\r\n          marker_remarks: \"\",\r\n          editor_comments: \"\",\r\n          marks: 1,\r\n          issue_type: \"\",\r\n          test_type: -1,\r\n        },\r\n      },\r\n    };\r\n  },\r\n\r\n  created() {\r\n    Repository.get(`test-type/${this.testTypeToFilter}`).then((r) => {\r\n      this.Schema = r.data;\r\n    });\r\n\r\n    Repository.get(\"test-types\").then((r) => {\r\n      this.AllTestTypes = r.data;\r\n    });\r\n  },\r\n  methods: {\r\n    \r\n    triggerTQForm(SchemaID) {\r\n      this.editQuestionState.showForm = true;\r\n      this.editQuestionState.questionID = SchemaID;\r\n    },\r\n    deleteQuestion(SchemaID) {\r\n      Repository.delete(`test-question/${SchemaID}`)\r\n        .then((r) => {\r\n          r;\r\n          this.Schema.TestQuestions = this.Schema.TestQuestions.filter(\r\n            (q) => q[\"SchemaID\"] != SchemaID\r\n          );\r\n\r\n          this.$notify({\r\n            title: \"Successfully Deleted\",\r\n            text: \"\",\r\n            type: \"info\",\r\n          });\r\n        })\r\n        .catch((e) => {\r\n          this.$notify({\r\n            title: \"Error Deleting\",\r\n            text: e,\r\n            type: \"error\",\r\n          });\r\n        });\r\n    },\r\n\r\n    createTestQuestion() {\r\n      let newQData = this.createQuestionState.newQuestionForm;\r\n      let payload = {\r\n        question_identifier: newQData.question_identifier,\r\n        marker_remarks: newQData.marker_remarks,\r\n        editor_comments: newQData.editor_comments,\r\n        marks: parseInt(newQData.marks),\r\n        issue_type: \"\",\r\n        test_type: this.Schema.ID,\r\n      };\r\n      Repository.post(\"test-question\", payload)\r\n        .then((r) => {\r\n          this.$notify({\r\n            title: \"Successfully Created\",\r\n            text: r.data,\r\n            type: \"info\",\r\n          });\r\n\r\n          this.resetCreateState();\r\n\r\n          //reload schema\r\n          Repository.get(`test-type/${this.testTypeToFilter}`).then((r) => {\r\n            this.Schema = r.data;\r\n          });\r\n        })\r\n        .catch((e) => {\r\n          this.$notify({\r\n            title: \"Test Creation Was Unsuccessful\",\r\n            text: e,\r\n            type: \"warn\",\r\n          });\r\n        });\r\n    },\r\n\r\n    updateTestQuestion() {\r\n      if (!this.editQuestionState.showForm) return;\r\n\r\n      let testQuestion = this.Schema.TestQuestions.filter(\r\n        (q) => q[\"SchemaID\"] == this.editQuestionState.questionID\r\n      )[0];\r\n\r\n      let payload = {\r\n        question_identifier: testQuestion[\"question_id\"],\r\n        marker_remarks: testQuestion.marker_remarks,\r\n        editor_comments: testQuestion.editor_comments,\r\n        info_url: \"\",\r\n        marks: parseInt(testQuestion.marks),\r\n        issue_type: \"\",\r\n        test_type: testQuestion.TestType.id,\r\n      };\r\n\r\n      Repository.put(\r\n        `test-question/${this.editQuestionState.questionID}`,\r\n        payload\r\n      )\r\n        .then((r) => {\r\n          r;\r\n          this.editQuestionState.showForm = false;\r\n          this.editQuestionState.questionID = 0;\r\n\r\n          this.$notify({\r\n            title: \"Successfully Updated\",\r\n            text: \"\",\r\n            type: \"info\",\r\n          });\r\n        })\r\n        .catch((e) => {\r\n          this.$notify({\r\n            title: \"Error Updating\",\r\n            text: e,\r\n            type: \"error\",\r\n          });\r\n        });\r\n    },\r\n    resetCreateState() {\r\n      this.createQuestionState = {\r\n        showForm: false,\r\n        newQuestionForm: {\r\n          question_identifier: \"\",\r\n          marker_remarks: \"\",\r\n          editor_comments: \"\",\r\n          marks: 1,\r\n          issue_type: \"\",\r\n          test_type: -1,\r\n        },\r\n      };\r\n    },\r\n  },\r\n  computed: {\r\n    cssVars() {\r\n      let status = undefined;\r\n      if (this.createQuestionState.showForm) {\r\n        status = \"Creating New Question\";\r\n      } else if (this.editQuestionState.showForm) {\r\n        status = \"Editing Question\";\r\n      }\r\n      return {\r\n        \"--text\": JSON.stringify(status),\r\n      };\r\n    },\r\n    filteredQuestions() {\r\n      let query = this.questionSearch.toLowerCase();\r\n\r\n      if (query.length > 0) {\r\n        return this.Schema.TestQuestions.filter(\r\n          (q) =>\r\n            q[\"marker_remarks\"].toLowerCase().indexOf(query) > -1 ||\r\n            q[\"editor_comments\"].toLowerCase().indexOf(query) > -1\r\n        );\r\n      } else {\r\n        return this.Schema.TestQuestions;\r\n      }\r\n    },\r\n    uniqueTestTypes() {\r\n      // return this.AllTestTypes.map((r) => r[\"test_type_name\"]);\r\n      return [\r\n        \"acadfad\",\r\n        \"adsfadfa\",\r\n        \"adsfasdfa\",\r\n        \"acadfad\",\r\n        \"adsfadfa\",\r\n        \"adsfasdfa\",\r\n        \"acadfad\",\r\n        \"adsfadfa\",\r\n        \"adsfasdfa\",\r\n        \"acadfad\",\r\n        \"adsfadfa\",\r\n        \"adsfasdfa\",\r\n        \"acadfad\",\r\n        \"adsfadfa\",\r\n        \"adsfasdfa\",\r\n      ]\r\n    },\r\n    showQuestionView() {\r\n      return (\r\n        !this.createQuestionState.showForm && !this.editQuestionState.showForm\r\n      );\r\n    },\r\n    editorHeader() {\r\n      if (this.createQuestionState.showForm) {\r\n        return `Creating New Question for ${this.testTypeToFilter}`;\r\n      } else if (this.editQuestionState.showForm) {\r\n        return `Editing Question`;\r\n      } else {\r\n        return `${this.testTypeToFilter} Questions`;\r\n      }\r\n    },\r\n  },\r\n  watch: {\r\n    testTypeToFilter: function () {\r\n      Repository.get(`test-type/${this.testTypeToFilter}`).then((r) => {\r\n        this.Schema = r.data;\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"sass\" scoped>\r\n.schema-editor-container\r\n    background: white\r\n    height: 640px\r\n    width: 640px\r\n    padding: 64px\r\n    margin: 64px auto\r\n\r\n.proof_table_heading > td\r\n  border: 1px solid rgba(0, 0, 0, 0.1)\r\n  padding: 10px\r\n  border-collapse: collapse\r\n.proof_table\r\n  width: 100%\r\n\r\n.text-align\r\n  display: flex\r\n  align-items: baseline\r\n.text-align > span\r\n  font-size: x-large\r\n\r\n.table_btns button\r\n  min-width: 100px\r\n  line-height: 30px\r\n  font-size: 14px\r\n  height: 30px\r\n  color: white\r\n  background: rgba(0, 179, 115, 1)\r\n  border-radius: 22px\r\n  text-align: center\r\n  transition: 0.5s\r\n  border: none\r\n\r\n.table_btns button:hover\r\n  text-decoration: none\r\n  color: white\r\n  background: #008F5C\r\n.table_btns\r\n  display: flex\r\n  \r\n.schema-container\r\n  display: grid\r\n  grid-template-columns: 1fr 2fr\r\n  grid-column-gap: 24px\r\n  margin: 94px 120px 64px 120px\r\n\r\n.tt-drop-down\r\n  position: absolute\r\n  margin-left: 120px\r\n  margin-top: 30px\r\n  overflow-y: scroll\r\n  max-height: 400px\r\n\r\n.schema-container-item\r\n  background: white\r\n  padding: 32px\r\n\r\n.form-label\r\n  font-size: 12px\r\n  line-height: 16px\r\n  color: #001E62\r\n\r\n\r\n.thin-text-area\r\n  width: 100%\r\n  background: #FFFFFF\r\n  border: 1px solid rgba(0, 0, 0, 0.1)\r\n  box-sizing: border-box\r\n  border-radius: 22px\r\n  padding: 8px\r\n  color: #001E62\r\n  padding-left: 22px\r\n  margin: 0 0 12px 0\r\n\r\n.thicc-text-area\r\n  width: 100%\r\n  background: #FFFFFF\r\n  border: 1px solid rgba(0, 0, 0, 0.1)\r\n  box-sizing: border-box\r\n  border-radius: 22px\r\n  padding: 8px\r\n  color: #001E62\r\n  padding-left: 22px\r\n  min-height: 64px\r\n  margin: 0 0 12px 0\r\n\r\n.thin-text-area:focus\r\n  box-shadow: none\r\n  border: 2px solid #00B373\r\n\r\n.test-type-select-container\r\n  display: flex\r\n  justify-content: space-around\r\n  margin: 40px 80px 0\r\n  max-width: 100%\r\n\r\n.create-question-form\r\n  background: white\r\n\r\n.test-question-list\r\n  position: relative\r\n\r\n.test-question-list::before\r\n  position: absolute\r\n  content: var(--text)\r\n  text-align: center\r\n  background: rgba(0, 30, 98, 1)\r\n  color: white\r\n  width: 100%\r\n  height: auto\r\n  padding: 2px\r\n  font-size: 10pt\r\n  left: -0px\r\n  top: -24px\r\n\r\n@media only screen and (max-width: 900px)\r\n  .schema-container\r\n    grid-template-columns: 1fr\r\n    margin: 16px\r\n\r\n  .schema-container-item\r\n    margin: 16px\r\n</style>\r\n"],"sourceRoot":"src/views"}]}